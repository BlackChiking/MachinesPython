def func1(arg1, arg2):
    var36 = var5(arg2, arg1)
    var40 = func6(arg1, arg2)
    var45 = func8(var36, var40)
    var46 = func11()
    var47 = var40 ^ var46
    var48 = ((-509 | arg1) - var46) ^ arg1
    var49 = -194084259 ^ 966
    var50 = var40 & (var47 | var48)
    var51 = var40 - arg2
    var52 = (var51 | var48 & var51) & arg2
    var53 = 435 - var46 & 672 - -945
    var54 = (var49 ^ arg2 ^ arg2) ^ var52
    var55 = arg2 + var46 + var47 ^ arg1
    var56 = (var46 + 841 | 706975124) + var51
    var57 = arg1 & ((arg1 - var47) & var49)
    var58 = (-1744181663 - var52) | var56 ^ var56
    var59 = var36 ^ ((arg1 & var50) & var50)
    var60 = var51 ^ ((var48 - var36) ^ var48)
    var61 = var59 - var52
    var62 = (var51 ^ var54 ^ var49) - var54
    var63 = (var59 + var59 ^ var60) - var54
    result = var48 + var56 & var51 | (var62 ^ (-812918554 - arg1 - var49) & var57) ^ (var48 - (arg1 + var50)) & var61
    return result
def func11():
    func9()
    result = len(xrange(40))
    func10()
    return result
def func10():
    global len
    del len
def func9():
    global len
    len = lambda x : 9
def func8(arg41, arg42):
    var43 = 0
    for var44 in range(13):
        var43 += var43 | var43 & var44
    return var43
def func4(arg6, arg7):
    var12 = func5(arg7, arg6)
    var13 = (1219026126 + var12 + var12) + 1386766606
    var14 = arg7 + (var13 | arg6)
    var15 = var12 ^ var13
    var16 = var14 ^ var13
    var17 = (var15 ^ var14) + var15
    var18 = var17 - (var13 | (arg6 & 353))
    var19 = (175092160 + arg6) - var14 | arg7
    var20 = (var16 + arg6 + var18) & var17
    var21 = var15 + 338036147
    var22 = 1398760472 - (var21 + var13) | var21
    var23 = (var18 ^ var19 & var15) ^ var19
    var24 = (arg6 - var15 + arg6) - var19
    var25 = var16 - ((arg7 ^ var16) + var16)
    if var13 < var25:
        var26 = var24 | -2075617220
    else:
        var26 = var24 + (var13 - 585021686) ^ var17
    var27 = var23 - var13 | var20
    var28 = (var12 | var16) ^ var20
    var29 = ((var15 | var23) & var25) & arg7
    var30 = var17 - ((var25 ^ var15) + var13)
    var31 = ((var12 - var27) + 638) - var17
    var32 = var30 - var15
    var33 = (var31 - var15) + var13 + var13
    var34 = var31 | var24
    var35 = (var28 - arg7) | var19 + var15
    result = (var21 ^ var19 ^ arg7) & var23
    return result
def func5(arg8, arg9):
    var10 = 0
    for var11 in range(2):
        var10 += var10 + arg9
    return var10
def func3():
    closure = [9]
    def func2(arg3, arg4):
        closure[0] += func4(arg3, arg4)
        return closure[0]
    func = func2
    return func
var5 = func3()
def func6(arg37, arg38):
    def func7(acc, rest):
        var39 = acc + rest + -4
        if acc == 0:
            return var39
        else:
            result = func7(acc - 1, var39)
            return result
    result = func7(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 12'
    print 'arg_number: 64'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,
